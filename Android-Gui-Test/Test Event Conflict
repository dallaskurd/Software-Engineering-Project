    public boolean eventConflict(Events[] ev)
    {
        boolean conflict = false;
        for(int i = 0; i < ev.length; i++)
        {
        if((!ev[i].getHoliday())) //Add other reqs here
            {
            if(getSTimeOfDay() == ev[i].getSTimeOfDay()) { // both events start at the same time
                if(getSHour() == ev[i].getSHour())
                    if(getSMinute() == ev[i].getSMinute()) {
                        conflict = true;
                        break;
                        }
            } else if(getETimeOfDay() == ev[i].getETimeOfDay()) { // both events end at the same time
                    if(getEHour() == ev[i].getEHour())
                        if(getEMinute() == ev[i].getEMinute()) {
                            conflict = true;
                            break;
                            }
            } else if(getSTimeOfDay() == ev[i].getSTimeOfDay()) { // both events start and end at the exact same time
                    if(getETimeOfDay() == ev[i].getETimeOfDay())
                        if(getSHour() == ev[i].getSHour())
                            if(getEHour() == ev[i].getEHour())
                                if(getSMinute() == ev[i].getSMinute())
                                    if(getEMinute() == ev[i].getEMinute()) {
                                    conflict = true;
                                    break;
                                    }
            } else if((ev[i].getSTimeOfDay() == "AM") && (getSTimeOfDay() == "PM")) { // new event starts between old event
                    if((Integer.parseInt(ev[i].getSHour())) > Integer.parseInt(getSHour())) {
                        conflict = true;
                        break;
                    }
            } else // no conflict, do nothing
                ;
            }
        }
        return conflict;
    }
