package com.example.zach.myapplication_helloworld;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.CalendarView;
import android.widget.CalendarView.OnDateChangeListener;
import android.view.MotionEvent;
import android.widget.ViewFlipper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;


public class CalendarTest extends Activity
{
    private ViewFlipper viewFlipper;
    private float lastX;
    private Events[] dayevents; //Put Day events here
    private Calendar ci;
    // why do we need to calendars?

    private Calendar ci2;
    private String todaysDate;
    @Override
    public void onCreate(Bundle savedInstanceState)
    {



        ci = new GregorianCalendar();
        ci2 = new GregorianCalendar();
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_calendar_test);
        //This is the Month View Code
        final CalendarView calendar = (CalendarView) findViewById(R.id.calendar);
        calendar.setOnDateChangeListener(new OnDateChangeListener() {
            @Override
            public void onSelectedDayChange(CalendarView view, int year, int month, int day) {
                //Find Events at the date givin by the parameters put into event
                ci2.set(year, month, day);
                SimpleDateFormat date = new SimpleDateFormat("MMMMMM dd yyyy", Locale.US);
                Date today = ci2.getTime();
                todaysDate = date.format(today);
                popUpEvent(todaysDate,month,day,year);
            }


        });

        viewFlipper = (ViewFlipper) findViewById(R.id.viewflipper);

        //ADD
        Button add = (Button) findViewById(R.id.add);
        add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                add();

            }
        });
        Events e = new Events();

        //Week View Code
        setWeekView();

        //Day View
        setDayView();
    }
    public void setDayView()
    {
        ListView lv2 = (ListView) findViewById(R.id.dayevents);
        ci= new GregorianCalendar();
        int day=ci.get(Calendar.DAY_OF_MONTH);
        int month=ci.get(Calendar.MONTH)+1;
        int year=ci.get(Calendar.YEAR);
        dayevents = setDayEvents(month,day,year);
        String[] dayNames;
        dayNames = new String[dayevents.length];
        for (int i = 0; i < dayevents.length; i++)
        {
            dayNames[i] = dayevents[i].getName();
        }
        final ArrayAdapter<String> adapter = new MySimpleArrayAdapter<>(this, android.R.layout.simple_list_item_1, dayNames, dayevents);
        lv2.setAdapter(adapter);
        adapter.notifyDataSetChanged();
        //  lv2.setEnabled(true);
        lv2.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> myAdapter, View myView, int pos, long mylng) {
                deleteOrEdit(dayevents, adapter, pos);
            }
        });
    }
    public void setWeekView()
    {
        Button sun = (Button) findViewById(R.id.Sundayevents);
        Button mon = (Button) findViewById(R.id.Mondayyevents);
        Button tues = (Button) findViewById(R.id.Tuesdayevents);
        Button wed = (Button) findViewById(R.id.Wednesdayevents);
        Button thurs = (Button) findViewById(R.id.Thursdayevents);
        Button fri = (Button) findViewById(R.id.Fridayevents);
        Button sat = (Button) findViewById(R.id.Saturdayevents);
        sun.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                setWeekEvents(1);
            }
        });
        mon.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View arg0)
            {
                setWeekEvents (2);
            }
        });
        tues.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View arg0)
            {
                setWeekEvents(3);
            }
        });
        wed.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                setWeekEvents(4);
            }
        });
        thurs.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View arg0)
            {
                setWeekEvents (5);
            }
        });
        fri.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                setWeekEvents(6);
            }
        });
        sat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                setWeekEvents(7);
            }
        });
    }
    public void setWeekEvents (int d)
    {
        ci = new GregorianCalendar();
        int month = ci.get(Calendar.MONTH);
        int year = ci.get(Calendar.YEAR);
        int dow = ci.get(Calendar.DAY_OF_WEEK);
        int day = ci.get(Calendar.DAY_OF_MONTH);
        if(dow<d)//We want a later day
        {
            while(dow<d)
            {
                dow++;
                day++;
            }
        }
        else if (dow>d)//We want a earlier then today
        {
            while(dow>d)
            {
                dow--;
                day--;
            }
        }
        ci.set(year, (month), day);
        month = ci.get(Calendar.MONTH);
        year = ci.get(Calendar.YEAR);
        day = ci.get(Calendar.DAY_OF_MONTH);
        SimpleDateFormat date = new SimpleDateFormat("MMMMMM dd yyyy", Locale.US);
        Date today = ci.getTime();
        todaysDate= date.format(today);
        popUpEvent(todaysDate, month, day, year);
    }
    public void deleteOrEdit(Events [] ev,ArrayAdapter<String> ad,int pos)
    {
        final Events [] evs=ev;
        final AlertDialog.Builder alertDialog = new AlertDialog.Builder(CalendarTest.this);
        alertDialog.setTitle("Edit or Delete");
        String selectedFromList = (String) ad.getItem(pos);
        int i = 0;
        while (!(selectedFromList.equals(ev[i].getName())))
        {
            i++;
        }
        Context context = CalendarTest.this;
        LinearLayout layout = new LinearLayout(context);
        layout.setOrientation(LinearLayout.VERTICAL);

        Button delete = new Button(context);
        delete.setText("Delete");
        layout.addView(delete);
        final int a = i;
        Button edit = new Button(context);
        edit.setText("Edit");
        layout.addView(edit);
        alertDialog.setView(layout);
        edit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                edit(evs[a]);
            }
        });
        delete.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                delete(evs[a].getFileName());
            }
        });
        alertDialog.show();
    }
    public void add()
    {
        final AlertDialog.Builder alertDialog = new AlertDialog.Builder(CalendarTest.this);
        alertDialog.setTitle("Add Event");
        alertDialog.setMessage("Details of the Event");
        Context context = CalendarTest.this;
        LinearLayout layout = new LinearLayout(context);
        layout.setOrientation(LinearLayout.VERTICAL);
        final Events ev= new Events();
        final EditText text = new EditText(context);
        text.setHint("Name of Event:");
        layout.addView(text);
        final EditText text2 = new EditText(context);
        text2.setHint("Category of Event:");
        layout.addView(text2);
        final EditText text3 = new EditText(context);
        text3.setHint("When does the Event Start? 2:30 PM");
        layout.addView(text3);
        final EditText text6 = new EditText(context);
        text6.setHint("When does the Event End? 2:30 PM");
        layout.addView(text6);
        final EditText text9 = new EditText(context);
        text9.setHint("Event Description:");
        layout.addView(text9);
        final EditText text10 = new EditText(context);
        text10.setHint("Event Place:");
        layout.addView(text10);
        final EditText text11 = new EditText(context);
        text11.setHint("Event Date:");
        layout.addView(text11);
        alertDialog.setView(layout);
        alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                String sT=text3.getText().toString().split(":")[0];
                String sT2=text3.getText().toString().split(":")[1];
                int sTime2= Integer.parseInt(sT2.split(" ")[0]);
                int sTime= Integer.parseInt(sT);
                String eT=text3.getText().toString().split(":")[0];
                String eT2=text3.getText().toString().split(":")[1];
                int eTime2= Integer.parseInt(eT2.split(" ")[0]);
                int eTime= Integer.parseInt(eT);
                ev.addEvent(text.getText().toString(), text2.getText().toString(), sTime, sTime2, eTime,
                        eTime2, text9.getText().toString(), text10.getText().toString(), text11.getText().toString(), sT2.split(" ")[1], eT2.split(" ")[1], CalendarTest.this);
                dialog.cancel();
                setDayView();
            }
        });
        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                dialog.cancel();
            }
        });
        alertDialog.show();
    }
    public void edit(Events ev)
    {
        final AlertDialog.Builder alertDialog = new AlertDialog.Builder(CalendarTest.this);
        alertDialog.setTitle("Edit Event");
        alertDialog.setMessage("Write what you want to edit");
        Context context = CalendarTest.this;
        LinearLayout layout = new LinearLayout(context);
        layout.setOrientation(LinearLayout.VERTICAL);
        final Events ev1=ev;
        final EditText text = new EditText(context);
        text.setHint("Name of Event:");
        text.setText("");
        layout.addView(text);
        final EditText text2 = new EditText(context);
        text2.setHint("Category of Event:");
        text2.setText("");
        layout.addView(text2);
        final EditText text3 = new EditText(context);
        text3.setHint("Time of Start: 2:30 PM");
        text3.setText("0:78 AM/PM");
        layout.addView(text3);
        final EditText text6 = new EditText(context);
        text6.setHint("Time of End: 2:30 PM");
        text6.setText("0:78 AM/PM");
        layout.addView(text6);
        final EditText text9 = new EditText(context);
        text9.setHint("Event Description:");
        text9.setText("");
        layout.addView(text9);
        final EditText text10 = new EditText(context);
        text10.setHint("Event Place:");
        text10.setText("");
        layout.addView(text10);
        final EditText text11 = new EditText(context);
        text11.setHint("Event Date: (month/day/year)");
        text11.setText("");
        layout.addView(text11);
        alertDialog.setView(layout);
        alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                String sT=text3.getText().toString().split(":")[0];
                String sT2=(text3.getText().toString().split(":")[1]);

                int sTime2= Integer.parseInt(sT2.split(" ")[0]);
                int sTime= Integer.parseInt(sT);

                String eT=text3.getText().toString().split(":")[0];
                String eT2=text3.getText().toString().split(":")[1];
                int eTime2= Integer.parseInt(eT2.split(" ")[0]);
                int eTime= Integer.parseInt(eT);
                System.out.println(eT2.split(" ")[1]);
                System.out.println(sT2.split(" ")[1]);
                ev1.editEvent(text.getText().toString(), text2.getText().toString(), sTime, sTime2, eTime,
                        eTime2, text9.getText().toString(), text10.getText().toString(), text11.getText().toString(), eT2.split(" ")[1],
                        sT2.split(" ")[1], CalendarTest.this);
                dialog.cancel();
                setDayView();
            }
        });
        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                dialog.cancel();
            }
        });
        alertDialog.show();
    }
    public void delete(final String fn)
    {
        if(fn.contains("TestJUSTHEREFORITTOSTARTWELL"))
        {
            Events ev = new Events();
            String[] list = fileList();
            ev.deleteEvent(list[1], CalendarTest.this);
            setDayView();
        }
        else {
            final AlertDialog.Builder alertDialog = new AlertDialog.Builder(CalendarTest.this);
            alertDialog.setTitle("Delete Event");
            alertDialog.setMessage("Are you sure?");


            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    Events ev = new Events();
                    String[] list = fileList();
                    for (int i = 0; i < list.length; i++) {
                        //   System.out.println(list[i] + " test 1= " +  "a " + list[i].split("_")[0].substring(0,2).equals(fn.split("_")[0].substring(0,2))+" "+list[i].split("_")[0].substring(2,3).equals(fn.split("_")[0].substring(2,3)));
                        System.out.println(fn + " " + list[i]);
                        if (list[i].contains(fn)) {
                            ev.deleteEvent(list[i], CalendarTest.this);
                            dialog.cancel();
                            setDayView();
                            i = list.length;
                        }
                    }

                }
            });

            alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    dialog.cancel();
                }
            });

            alertDialog.show();
        }
    }
    public void popUpEvent( String to,int m,int d,int y)
    {
        final Events[] ev=setDayEvents(m + 1, d, y);
        String[] names = new String[ev.length];
        final AlertDialog.Builder alertDialog = new AlertDialog.Builder(CalendarTest.this);
        LayoutInflater inflater = getLayoutInflater();
        View convertView = (View) inflater.inflate(R.layout.custom, null);
        alertDialog.setView(convertView);
        alertDialog.setTitle(to+" Events");
        ListView lv = (ListView) convertView.findViewById(R.id.listView1);
        for (int i=0;i<ev.length;i++)
        {
            names[i]=ev[i].getName();
        }
        final  ArrayAdapter<String> adapter = new MySimpleArrayAdapter<>(this, android.R.layout.simple_list_item_1, names,ev);
        lv.setAdapter(adapter);

        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> myAdapter, View myView, int pos, long mylng) {
                deleteOrEdit(ev, adapter, pos);
            }
        });

        alertDialog.show();
        adapter.notifyDataSetChanged();
    }
    public Events[] setDayEvents(int month,int day,int year)
    {
        String[] list = fileList();
        Events[] evetemp = new Events[1000];
        int number_of_events_today=0;
        for (int i=0;i<list.length;i++)
        {
            if (list[i].contains(month + "_" + day + "_" + year))
            {
                evetemp[number_of_events_today]=getEvents(list[i]);
                number_of_events_today++;
            }
        }
        if (month == 1 && day == 1) // New Years
        {
            Events temp =new Events("New Years", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // MLK Day is the 3rd Monday of January
        GregorianCalendar calendar = new GregorianCalendar();
        calendar.set(year, month-1, 1); //set first day of month in this year
        int MLKDay;

        if (month == 1) {
            if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                MLKDay = 7 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                MLKDay = 6 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                MLKDay = 5 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                MLKDay = 4 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 7) {
                MLKDay = 3 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                MLKDay = 2 + 14;
            } else {
                MLKDay = 15;
            }

            if (day == MLKDay) {
                Events temp =new Events("MLK Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }
        }

        // Valentine's Day
        if (month == 2 && day == 14) {
            Events temp =new Events("Valentine's Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // Presidents Day is 3rd Monday in February
        if (month == 2) {
            calendar.set(year, month-1, 1); //set the first day of the month in this year
            int PresidentsDay;


            if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                PresidentsDay = 7 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                PresidentsDay = 6 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                PresidentsDay = 5 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                PresidentsDay = 4 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 7) {
                PresidentsDay = 3 + 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                PresidentsDay = 2 + 14;
            } else {
                PresidentsDay = 15;
            }

            if (day == PresidentsDay) {
                Events temp =new Events("Presidents Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }
        }

        // Memorial Day
        // is LAST Monday in May

        if (month == 5) {
            calendar.set(year, month - 1, 31); //set the first day of the month in this year
            int MemorialDay;


            if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                MemorialDay = 25;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 2) {
                MemorialDay = 31;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                MemorialDay = 30;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                MemorialDay = 29;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                MemorialDay = 28;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                MemorialDay = 27;
            } else {
                MemorialDay = 26;
            }

            if (day == MemorialDay) {
                Events temp =new Events("Memorial Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }
        }

        // Independence Day
        // is always the 4th of  July
        if (month == 7 && day == 4) {
            Events temp =new Events("Independence Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // Labor Day
        // is the first Monday in September
        if (month == 9) {
            calendar.set(year, month-1, 1); //set the first day of the month in this year
            int LaborDay;


            if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                LaborDay = 2;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 2) {
                LaborDay = 1;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                LaborDay = 7;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                LaborDay = 6;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                LaborDay = 5;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                LaborDay = 4;
            } else {
                LaborDay = 3;
            }
            if (day == LaborDay) {
                Events temp =new Events("Labor Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }
        }
        // Columbus Day
        // is the second Monday in October

        if (month == 10) {
            calendar.set(year, month - 1, 1); //set the first day of the month in this year
            int ColumbusDay;


            if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                ColumbusDay = 9;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 2) {
                ColumbusDay = 8;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                ColumbusDay = 14;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                ColumbusDay = 13;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                ColumbusDay = 12;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                ColumbusDay = 11;
            } else {
                ColumbusDay = 10;
            }
            if (day == ColumbusDay) {
                Events temp =new Events("Columbus Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }

        }
        // Halloween
        // October 31st
        if (month == 10 && day == 31) {
            Events temp =new Events("Halloween", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // Veterans Day
        // is always the 11th of November
        if (month == 11 && day == 11) {
            Events temp =new Events("Veterans Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }


        //Thanksgiving day
        // the 4th Thursday of november
        if (month == 11) {
            calendar.set(year, month-1, 1); //set the first day of the month in this year
            int Thanksgiving;


            if (calendar.get(calendar.DAY_OF_WEEK) == 1) {
                Thanksgiving = 26;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 2) {
                Thanksgiving = 25;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 3) {
                Thanksgiving = 24;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 4) {
                Thanksgiving = 23;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 5) {
                Thanksgiving = 22;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == 6) {
                Thanksgiving = 28;
            } else {
                Thanksgiving = 27;
            }
            if (day == Thanksgiving) {
                Events temp =new Events("Thanksgiving", "Holiday", "","", 0, 0, "AM", "11/"+day+"/"+year, 23, 59, "PM");
                number_of_events_today++;
                evetemp[number_of_events_today-1]=temp;
            }
        }

        //Christmas Eve
        if (month == 12 && day == 24) {
            Events temp =new Events("Christmas Eve", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // Christmas Day
        if (month == 12 && day == 25) {
            Events temp =new Events("Christmas Day", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }

        // New Years Eve
        if (month == 12 && day == 31) {
            Events temp =new Events("New Years Eve", "Holiday", "place","description", 0, 0, "AM", month+"/"+day+"/"+year, 23, 59, "PM");
            number_of_events_today++;
            evetemp[number_of_events_today-1]=temp;
        }
        Events[] eves;
        eves = new Events[number_of_events_today];
        for (int i = 0; i < eves.length; i++)
        {
            eves[i] = evetemp[i];
        }
        return eves;
    }
    public Events getEvents(String fileName)
    {

        try
        {
            FileInputStream in = CalendarTest.this.openFileInput(fileName);
            byte[] buffer = new byte[(int) in.getChannel().size()];

            try {
                in.read(buffer);
                String buf=new String(buffer);
                String [] buff = buf.split(",");
                Events eve=new Events(buff[0],buff[1],buff[2],"1",Integer.parseInt(buff[3]),Integer.parseInt(buff[4]),buff[5],buff[6],Integer.parseInt(buff[7]),Integer.parseInt(buff[8]),buff[9]);
                return eve;
            }
            finally {
                in.close();
            }
        }
        catch(IOException ex)
        {
            Events eve= new Events();
            return eve;
        }

    }
    public boolean onTouchEvent(MotionEvent touchevent)
    {
        switch (touchevent.getAction())
        {
            case MotionEvent.ACTION_DOWN:
                lastX = touchevent.getX();
                break;
            case MotionEvent.ACTION_UP:
                float currentX = touchevent.getX();
                // Handling left to right screen swap.
                if (lastX < currentX)
                {
                    // If there aren't any other children, just break.
                    if (viewFlipper.getDisplayedChild() == 0)
                        break;
                    // Next screen comes in from left.
                    viewFlipper.setInAnimation(this, R.anim.slide_in_from_left);
                    // Current screen goes out from right.
                    viewFlipper.setOutAnimation(this, R.anim.slide_out_to_right);
                    // Display next screen.
                    viewFlipper.showNext();
                }
                // Handling right to left screen swap.
                if (lastX > currentX)
                {
                    // If there is a child (to the left), kust break.
                    if (viewFlipper.getDisplayedChild() == 1)
                        break;
                    // Next screen comes in from right.
                    viewFlipper.setInAnimation(this, R.anim.slide_out_to_right);
                    // Current screen goes out from left.
                    viewFlipper.setOutAnimation(this, R.anim.slide_out_to_left);
                    // Display previous screen.
                    viewFlipper.showPrevious();
                }
                break;
        }
        return false;
    }

}
